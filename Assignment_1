/* 
Carlos and Tylers first assignment

Using numbers to represent cards 
* 3 digits
  * first digit represents suit
    * 1xx represents hearts
    * 2xx represents diamonds
    * 3xx represents clubs
    * 4xx represents spades
  * the 2nd and 3rd digits represent face values
    * x01 represents aces
    * x02 represents twos
    * x03 represents threes
    * ...
    * x10 represents tens
    * x11 represents jacks
    * x12 represents queens
    * x13 represents kings
Check for pair using modulus
  * if (card1 % 100 == card2 %100) // will return true for pair
  
Creating, shuffling, dealing, and discarding with the deck
  * queue does not allow us to traverse the list to print the contents between hands
  * deque (pronounced deck) should allow traversal
  * std::shuffle should work with deque to randomize the deck
  
**** to run on the school server ***
upload this file as a *.cpp
navigate to the folder containing the file
enter the following to compile:
  g++ -std=c++11 filename.cpp   // need to add -pthread once we implement them
then enter the following to run:
  ./a.out
  
  We can write a make file to simplify this for submission...
 

*/

#include <iostream>     // std::cout
#include <algorithm>    // std::shuffle
#include <deque>        // std::deque
#include <random>       // std::default_random_engine
#include <chrono>       // std::chrono::system_clock

using namespace std;

struct Player
{
   int playerNo;
   deque<int> playerHand;
};

// *** Prototypes ***
deque<int> populateDeck(deque<int> d);
deque<int> shuffleDeck(deque<int> d);
void printDeck(deque<int> d);
void initialDeal(Player* player[]);
void* drawCard(void*);
void discard(Player*& p);


deque<int> deck;
pthread_mutex_t deckLock;


int main(){
   
   pthread_t threads[3];
   void *status;
   
  
   Player* p1 = new Player;
   Player* p2 = new Player;
   Player* p3 = new Player;
   Player* player[3] = {p1,p2,p3};
  
  bool winner = false;
  
  // allows us to pop/push to increment player order each round
 //for (int i=0; i<3; i++) order[i]=(i+1);

  printDeck(deck);
  deck = populateDeck(deck);
  printDeck(deck);
  deck = shuffleDeck(deck);
  printDeck(deck);
  
  cout << "sending to initial deal function" << endl;

  initialDeal(player);
  printDeck(deck);
  
     cout << "entering thread creation loop" << endl;

  for(long int i = 0; i < 3; i++){
     pthread_create(&threads[i], NULL, drawCard, (void *)player[i]);
  }     
  
  for(int i = 0; i < 3; i++){
     pthread_join(threads[i], &status);
  }
  

  printDeck(deck);

}

// *** Functions ***
// populate the deck
 deque<int> populateDeck(deque<int> d){
  for(int i = 1; i <= 4; i++){
    for(int ii = 1; ii <= 13; ii++){
      int addCard = (i*100 + ii);
      d.push_back(addCard);
    }
  }
  return d;
 }

// shuffle the deck
 deque<int> shuffleDeck(deque<int> d){
  unsigned seed = chrono::system_clock::now().time_since_epoch().count();
  shuffle(d.begin(), d.end(), default_random_engine(seed));
  return d;
}

// print the deck contents
void printDeck(deque<int> d){
   if(d.size() == 0){
      cout << "\nThe deck is empty" << endl;
   }
   else{
      cout << "\nThe deck contains:" << endl;
      for(int i = 0; i < d.size(); i++){
         cout << d.at(i)  << " " ;
      }
   }
  cout << "\n * * * * * * * * * * * * * * * * * * " << endl;
  return;
}

//  deal initial cards
  void initialDeal(Player* p[]){

   // add mutex once dealer is implemented
      cout << "start of initial deal function" << endl;

   for(int i = 0; i < 3; i++){
      int cardToDeal = deck.front();
      deck.pop_front();
      p[i]->playerHand.push_back(cardToDeal);
   }
      cout << "leaving initial deal function" << endl;

   // remove mutex once dealer is implemented
}

//  individual player draws a card
//bool drawCard(deque<int> &d, deque<int> &p){

void* drawCard(void* player){
   cout << "entering drawCard function" << endl;

   Player* p = (Player*)player;
   bool won = false;
   pthread_mutex_lock(&deckLock);
   int cardToDraw = deck.front();
   deck.pop_front();
   p->playerHand.push_back(cardToDraw);
   if((p->playerHand.front()%100) == (p->playerHand.back()%100)){
      won = true;
   }
   else won = false;
   discard(p);
   pthread_mutex_unlock(&deckLock);
   //return;
   
}

//  individual player discards a card
void discard(Player*& p){
   cout << "entering discard function" << endl;
   unsigned seed = chrono::system_clock::now().time_since_epoch().count();
   srand (seed);
   int toDiscard = rand() % 100 + 1;
   cout << "discard card # :" << toDiscard << endl;
   if(toDiscard%2 == 0){
      int cardToDiscard = p->playerHand.front();
      p->playerHand.pop_front();
      deck.push_back(cardToDiscard);
   }
   else {
      int cardToDiscard = p->playerHand.back();
      p->playerHand.pop_back();
      deck.push_back(cardToDiscard);
   }
   cout << "leaving discard function" << endl;
}


/*rounds                    //will need to create dealer and player thread functions
void round(){               //will need to look more into pthreads for this part
    int threadDealer = pthread_create();
    
    int threadPlayer;
    for(r = 1; r <= 3; r++ )
    {
        threadPlayer = pthread_create();
    }
    
    pthread_join();         //will join player and dealer thread
    {
        
    }
    
}
*/
